<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function simple_mobile_redirect_menu() {
  $items['admin/settings/simple_mobile_redirect'] = array(
    'title' => 'Simple Mobile Redirect Settings',
    'description' => 'Setup site settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_mobile_redirect_admin_settings_form'),
    'access arguments' => array('administer simple mobile'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'simple_mobile_redirect.admin.inc',
    );
   $items['clearsimplemobileredirect'] = array(
     'page callback' => '_simple_mobile_redirect_clearcookie',
     'type' => MENU_CALLBACK,
     'access arguments' => array('access content'),
   );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function simple_mobile_redirect_perm() {
  return array('administer simple mobile');
}

/**
 * Function to clear the do not redirect cookie.
 */
function _simple_mobile_redirect_clearcookie() {
  setcookie("nomobi", "", time()-3600);
  $simplemobileredirect = variable_get('simple_mobile_redirect_mobileredirect', '/');
  if ($simplemobileredirect == '/') {
    $simplemobileredirect = '';
  }
  drupal_goto($simplemobileredirect);
}

/**
 * Function to set the do not redirect cookie.
 */
function _simple_mobile_redirect_setcookie() {
  $simplemobilehome = variable_get('simple_mobile_redirect_home', '/');
  $expire=time()+60*60*24*30;
  setcookie("nomobi", "yes", $expire);
  // drupal_goto() does not exist here, as we are triggering at boot.
  // suggestions to work around this, perhaps a variable setting to get the full URL via the admin.
  header('Location: '.$simplemobilehome); 
}

/**
 * Implementation of hook_boot().
 */
function simple_mobile_redirect_boot() {
  $iphone = variable_get('simple_mobile_redirect_iphone', '');
  $ipad = variable_get('simple_mobile_redirect_ipad', '');
  $android = variable_get('simple_mobile_redirect_android', '');
  $opera = variable_get('simple_mobile_redirect_opera', '');
  $blackberry = variable_get('simple_mobile_redirect_blackberry', '');
  $palm = variable_get('simple_mobile_redirect_palm', '');
  $windows = variable_get('simple_mobile_redirect_windows', '');
  $simplemobileredirect = variable_get('simple_mobile_redirect_mobileredirect', '');
  $simplemobilehome = variable_get('simple_mobile_redirect_home', '/');
  
  if (isset($_GET["nomobi"])) {
    // clear any redirect variables so the process will go to the main site.
    $iphone = '';
    $ipad = '';
    $android = '';
    $opera = '';
    $blackberry = '';
    $palm = '';
    $windows = '';
    $simplemobileredirect = '';
    _simple_mobile_redirect_setcookie();
  }
  
  if (isset($_COOKIE["nomobi"])) {
    $iphone = '';
    $ipad = '';
    $android = '';
    $opera = '';
    $blackberry = '';
    $palm = '';
    $windows = '';
    $simplemobileredirect = '';
  }
  // set mobile_browser as false till we can prove otherwise
  $is_mobile_browser   = false;
  // get the user agent
  $user_agent       = $_SERVER['HTTP_USER_AGENT']; 
  // get the content accept
  $httpaccept           = $_SERVER['HTTP_ACCEPT']; 

  // using a switch to check for the user agent, smoother than a searies of if's
  switch (TRUE) {
    
    // find the word ipad in the user agent
    case (preg_match('/ipad/i',$user_agent)): 
      $is_mobile_browser = $ipad; 
      $platform = 'Apple iPad';
      // Is there a URL to redirect iPads to?
      if(substr($ipad,0,4)=='http') { 
        $simplemobileredirect = $ipad; 
      } 
      // break out and skip the rest
    break; 

    // find the word iphone in the user agent
    case (preg_match('/ipod/i',$user_agent)||preg_match('/iphone/i',$user_agent)): 
      $is_mobile_browser = $iphone; 
      $platform = 'Apple';
      // Is there a URL to redirect iPhones to?
      if(substr($iphone,0,4)=='http') { 
        $simplemobileredirect = $iphone; 
      } 
      // break out and skip the rest
    break; 

    // we find android in the user agent
    case (preg_match('/android/i',$user_agent)):
      $is_mobile_browser = $android; 
      $platform = 'Android';
      // Is there a URL to redirect android to?
      if(substr($android,0,4)=='http') { 
        $simplemobileredirect = $android; 
      } 
      // break out and skip the rest
    break; 

    // we find opera mini in the user agent
    case (preg_match('/opera mini/i',$user_agent)):
      $is_mobile_browser = $opera; 
      $platform = 'Opera';
      // Is there a URL to redirect opera to?
      if(substr($opera,0,4)=='http') {
        $simplemobileredirect = $opera; 
      } 
      // break out and skip the rest
    break; 

    // we find blackberry in the user agent
    case (preg_match('/blackberry/i',$user_agent)): 
      $is_mobile_browser = $blackberry; 
      $platform = 'Blackberry';
      // Is there a URL to redirect blackberry to?
      if(substr($blackberry,0,4)=='http') { 
        $simplemobileredirect = $blackberry; 
      } 
      // break out and skip the rest
    break; 

    // we find palm os in the user agent 
    case (preg_match('/(pre\/|palm os|palm|hiptop|avantgo|plucker|xiino|blazer|elaine)/i',$user_agent)): 
      $is_mobile_browser = $palm; 
      $platform = 'Palm';
      // Is there a URL to redirect Plam to?
      if(substr($palm,0,4)=='http') { 
        $simplemobileredirect = $palm; 
      }
      // break out and skip the rest
    break; 

    // we find windows mobile in the user agent - the i at the end makes it case insensitive
    case (preg_match('/(iris|3g_t|windows ce|opera mobi|windows ce; smartphone;|windows ce; iemobile)/i',$user_agent)): 
      $is_mobile_browser = $windows; 
      $platform = 'Windows Smartphone';
      if(substr($windows,0,4)=='http') { 
        $simplemobileredirect = $windows; 
      } 
    // break out and skip the rest
    break; 

    // check if any of the values listed create a match on the user agent - these are some of the most common terms used in agents to identify them as being mobile devices 
    case (preg_match('/(mini 9.5|vx1000|lge |m800|e860|u940|ux840|compal|wireless| mobi|ahong|lg380|lgku|lgu900|lg210|lg47|lg920|lg840|lg370|sam-r|mg50|s55|g83|t66|vx400|mk99|d615|d763|el370|sl900|mp500|samu3|samu4|vx10|xda_|samu5|samu6|samu7|samu9|a615|b832|m881|s920|n210|s700|c-810|_h797|mob-x|sk16d|848b|mowser|s580|r800|471x|v120|rim8|c500foma:|160x|x160|480x|x640|t503|w839|i250|sprint|w398samr810|m5252|c7100|mt126|x225|s5330|s820|htil-g1|fly v71|s302|-x113|novarra|k610i|-three|8325rc|8352rc|sanyo|vx54|c888|nx250|n120|mtk |c5588|s710|t880|c5005|i;458x|p404i|s210|c5100|teleca|s940|c500|s590|foma|samsu|vx8|vx9|a1000|_mms|myx|a700|gu1100|bc831|e300|ems100|me701|me702m-three|sd588|s800|8325rc|ac831|mw200|brew |d88|htc\/|htc_touch|355x|m50|km100|d736|p-9521|telco|sl74|ktouch|m4u\/|me702|8325rc|kddi|phone|lg |sonyericsson|samsung|240x|x320|vx10|nokia|sony cmd|motorola|up.browser|up.link|mmp|symbian|smartphone|midp|wap|vodafone|o2|pocket|kindle|mobile|psp|treo)/i',$user_agent)): 
      $is_mobile_browser = true; 
      $platform = 'Mobile matched on piped preg_match';
    // break out and skip the rest if we've preg_match on the user agent returned true
    break;  

    // is the device showing signs of support for text/vnd.wap.wml or application/vnd.wap.xhtml+xml
    case ((strpos($httpaccept,'text/vnd.wap.wml')>0)||(strpos($httpaccept,'application/vnd.wap.xhtml+xml')>0)): 
      $is_mobile_browser = true; 
      $platform = 'Mobile matched on content accept header';
    // break out and skip the rest if we've had a match on the content accept headers
    break; 

    // is the device giving us a HTTP_X_WAP_PROFILE or HTTP_PROFILE header - only mobile devices would do this
    case (isset($_SERVER['HTTP_X_WAP_PROFILE'])||isset($_SERVER['HTTP_PROFILE'])): 
      // set mobile browser to true
      $is_mobile_browser = true; 
      $platform = 'Mobile matched on profile headers being set';
    // break out and skip the final step if we've had a return true on the mobile specfic headers
    break; 

    default:
      // set mobile browser to false
      $is_mobile_browser = false; 
      $platform = 'Desktop / full capability browser';
  // break even though it's the last statement in the switch so there's nothing to break away from
  break; 
  // ends the switch 
  } 

  if ($is_mobile_browser == '') {
    $is_mobile_browser = false;
  }
  // if redirect (either the value of the mobile or desktop redirect depending on the value of $is_mobile_browser) is true redirect else we return the status of $is_mobile_browser
  if($redirect = ($is_mobile_browser==true) ? $simplemobileredirect : '') {
    // redirect to the right url for this device
    drupal_goto($redirect); 
    exit;
  }
// ends function simple_mobile_redirect_boot
} 
